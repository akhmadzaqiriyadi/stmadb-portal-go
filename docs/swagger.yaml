basePath: /api/v1
definitions:
  handler.ChangePasswordRequest:
    properties:
      currentPassword:
        example: old_password123
        type: string
      newPassword:
        example: new_secure_password
        minLength: 6
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  handler.CreateUserRequest:
    properties:
      password:
        example: newpassword123
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - teacher
        - student
        - staff
        example: student
        type: string
      username:
        example: newuser
        minLength: 3
        type: string
    required:
    - password
    - role
    - username
    type: object
  handler.GenericResponse:
    properties:
      data: {}
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  handler.LoginRequest:
    properties:
      password:
        example: admin123
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  handler.ProfileData:
    properties:
      created_at:
        example: "2025-09-13T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      role:
        example: admin
        type: string
      username:
        example: admin
        type: string
    type: object
  handler.ProfileResponse:
    properties:
      data:
        $ref: '#/definitions/handler.ProfileData'
      message:
        example: Profile retrieved successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  handler.RefreshTokenRequest:
    properties:
      refreshToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refreshToken
    type: object
  handler.TokenResponse:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refreshToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  handler.UpdateUserRequest:
    properties:
      is_active:
        description: Pointer agar bisa membedakan antara nilai `false` dan tidak diisi
          sama sekali.
        type: boolean
      role:
        enum:
        - admin
        - teacher
        - student
        - staff
        example: teacher
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is the API documentation for STMADB Portal Backend.
  title: STMADB Portal Backend API
  version: "1.0"
paths:
  /auth/change-password:
    put:
      consumes:
      - application/json
      description: Allows an authenticated user to change their password.
      parameters:
      - description: Current and new passwords
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/handler.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/handler.GenericResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/handler.GenericResponse'
        "401":
          description: Unauthorized or incorrect password
          schema:
            $ref: '#/definitions/handler.GenericResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token pair.
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login Successful
          schema:
            allOf:
            - $ref: '#/definitions/handler.GenericResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.TokenResponse'
              type: object
        "400":
          description: Invalid Request
          schema:
            $ref: '#/definitions/handler.GenericResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.GenericResponse'
      summary: User login
      tags:
      - Authentication
  /auth/profile:
    get:
      description: Get the profile of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Profile Retrieved
          schema:
            $ref: '#/definitions/handler.ProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.GenericResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new pair of access and refresh tokens.
      parameters:
      - description: Refresh Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed
          schema:
            allOf:
            - $ref: '#/definitions/handler.GenericResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.TokenResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.GenericResponse'
      summary: Refresh token
      tags:
      - Authentication
  /health:
    get:
      consumes:
      - application/json
      description: get the status of server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server
      tags:
      - Health Check
  /users:
    get:
      description: Retrieves a list of all users. Only accessible by admins.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by username
        in: query
        name: search
        type: string
      - description: Filter by role (admin, teacher, student, staff)
        in: query
        name: role
        type: string
      - description: Filter by active status (true/false)
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/handler.GenericResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.GenericResponse'
      security:
      - BearerAuth: []
      summary: Get all users with filters and pagination
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user account. Only accessible by admins.
      parameters:
      - description: New User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/handler.GenericResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.ProfileData'
              type: object
        "400":
          description: Invalid request body or username exists
          schema:
            $ref: '#/definitions/handler.GenericResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Deletes a user account.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/handler.GenericResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.GenericResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      description: Retrieves details of a single user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            allOf:
            - $ref: '#/definitions/handler.GenericResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.ProfileData'
              type: object
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.GenericResponse'
      security:
      - BearerAuth: []
      summary: Get a single user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates a user's role or active status.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Update Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/handler.GenericResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.ProfileData'
              type: object
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.GenericResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
